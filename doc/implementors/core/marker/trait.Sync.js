(function() {var implementors = {};
implementors["hal"] = [{"text":"impl Sync for BootInfo","synthetic":true,"types":[]},{"text":"impl Sync for MemoryMap","synthetic":true,"types":[]},{"text":"impl Sync for MemoryMapEntry","synthetic":true,"types":[]},{"text":"impl Sync for LoadedImages","synthetic":true,"types":[]},{"text":"impl Sync for LoadedImage","synthetic":true,"types":[]},{"text":"impl Sync for Segment","synthetic":true,"types":[]},{"text":"impl Sync for VideoModeInfo","synthetic":true,"types":[]},{"text":"impl Sync for MemoryType","synthetic":true,"types":[]},{"text":"impl Sync for PixelFormat","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Frame&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Page&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for PhysicalAddress","synthetic":true,"types":[]},{"text":"impl Sync for VirtualAddress","synthetic":true,"types":[]},{"text":"impl Sync for PagingError","synthetic":true,"types":[]},{"text":"impl Sync for Size4KiB","synthetic":true,"types":[]},{"text":"impl Sync for Size2MiB","synthetic":true,"types":[]},{"text":"impl Sync for Size1GiB","synthetic":true,"types":[]},{"text":"impl Sync for PciAddress","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for PciHeader&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["kernel"] = [{"text":"impl Sync for HoleAllocator","synthetic":true,"types":[]},{"text":"impl Sync for LockedHoleAllocator","synthetic":true,"types":[]},{"text":"impl Sync for HoleInfo","synthetic":true,"types":[]},{"text":"impl Sync for Hole","synthetic":true,"types":[]},{"text":"impl Sync for HoleList","synthetic":true,"types":[]},{"text":"impl Sync for Allocation","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for KernelStackAllocator&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SlabAllocator","synthetic":true,"types":[]},{"text":"impl Sync for PhysicalMemoryManager","synthetic":true,"types":[]},{"text":"impl Sync for Stack","synthetic":true,"types":[]},{"text":"impl Sync for BuddyAllocator","synthetic":true,"types":[]},{"text":"impl Sync for KernelObjectId","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for AddressSpace&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Platform&gt;::PageTable: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for ChannelEnd","synthetic":true,"types":[]},{"text":"impl Sync for Message","synthetic":true,"types":[]},{"text":"impl Sync for MemoryObject","synthetic":true,"types":[]},{"text":"impl Sync for TaskBlock","synthetic":true,"types":[]},{"text":"impl Sync for TaskState","synthetic":true,"types":[]},{"text":"impl Sync for TaskCreationError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for Scheduler&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for UserPointer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for UserSlice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for UserString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for Task&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Platform,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libpebble"] = [{"text":"impl Sync for Handle","synthetic":true,"types":[]},{"text":"impl&lt;const N:&nbsp;usize&gt; Sync for CapabilitiesRepr&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for EarlyLogError","synthetic":true,"types":[]},{"text":"impl Sync for CreateMemoryObjectError","synthetic":true,"types":[]},{"text":"impl Sync for MapMemoryObjectError","synthetic":true,"types":[]},{"text":"impl Sync for SendMessageError","synthetic":true,"types":[]},{"text":"impl Sync for RegisterServiceError","synthetic":true,"types":[]},{"text":"impl Sync for SubscribeToServiceError","synthetic":true,"types":[]},{"text":"impl Sync for FramebufferInfo","synthetic":true,"types":[]},{"text":"impl Sync for GetFramebufferError","synthetic":true,"types":[]},{"text":"impl Sync for PixelFormat","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Sync for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Sync for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for LevelFilter","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Sync for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Sync for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Sync for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Sync for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Sync for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Sync for FloatErrorKind","synthetic":true,"types":[]}];
implementors["pebble_util"] = [{"text":"impl&lt;T&gt; Sync for BinaryPrettyPrint&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Sync for InitGuard&lt;T&gt;","synthetic":false,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for RwLockReadGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for RwLockWriteGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Sync for Once&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()