(function() {var implementors = {};
implementors["hal"] = [{"text":"impl Unpin for BootInfo","synthetic":true,"types":[]},{"text":"impl Unpin for MemoryMap","synthetic":true,"types":[]},{"text":"impl Unpin for MemoryMapEntry","synthetic":true,"types":[]},{"text":"impl Unpin for LoadedImages","synthetic":true,"types":[]},{"text":"impl Unpin for LoadedImage","synthetic":true,"types":[]},{"text":"impl Unpin for Segment","synthetic":true,"types":[]},{"text":"impl Unpin for VideoModeInfo","synthetic":true,"types":[]},{"text":"impl Unpin for MemoryType","synthetic":true,"types":[]},{"text":"impl Unpin for PixelFormat","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for Frame&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for Page&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Flags","synthetic":true,"types":[]},{"text":"impl Unpin for PhysicalAddress","synthetic":true,"types":[]},{"text":"impl Unpin for VirtualAddress","synthetic":true,"types":[]},{"text":"impl Unpin for PagingError","synthetic":true,"types":[]},{"text":"impl Unpin for Size4KiB","synthetic":true,"types":[]},{"text":"impl Unpin for Size2MiB","synthetic":true,"types":[]},{"text":"impl Unpin for Size1GiB","synthetic":true,"types":[]},{"text":"impl Unpin for PciAddress","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for PciHeader&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["kernel"] = [{"text":"impl Unpin for HoleAllocator","synthetic":true,"types":[]},{"text":"impl Unpin for LockedHoleAllocator","synthetic":true,"types":[]},{"text":"impl Unpin for HoleInfo","synthetic":true,"types":[]},{"text":"impl Unpin for Hole","synthetic":true,"types":[]},{"text":"impl Unpin for HoleList","synthetic":true,"types":[]},{"text":"impl Unpin for Allocation","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Unpin for KernelStackAllocator&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SlabAllocator","synthetic":true,"types":[]},{"text":"impl Unpin for PhysicalMemoryManager","synthetic":true,"types":[]},{"text":"impl Unpin for Stack","synthetic":true,"types":[]},{"text":"impl Unpin for BuddyAllocator","synthetic":true,"types":[]},{"text":"impl Unpin for KernelObjectId","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Unpin for AddressSpace&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Platform&gt;::PageTable: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for State","synthetic":true,"types":[]},{"text":"impl Unpin for ChannelEnd","synthetic":true,"types":[]},{"text":"impl Unpin for Message","synthetic":true,"types":[]},{"text":"impl Unpin for MemoryObject","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Unpin for Task&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for TaskBlock","synthetic":true,"types":[]},{"text":"impl Unpin for TaskState","synthetic":true,"types":[]},{"text":"impl Unpin for TaskCreationError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Unpin for Scheduler&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for UserPointer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for UserSlice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UserString&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["libpebble"] = [{"text":"impl Unpin for Handle","synthetic":true,"types":[]},{"text":"impl&lt;const N:&nbsp;usize&gt; Unpin for CapabilitiesRepr&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Capability","synthetic":true,"types":[]},{"text":"impl Unpin for EarlyLogError","synthetic":true,"types":[]},{"text":"impl Unpin for CreateMemoryObjectError","synthetic":true,"types":[]},{"text":"impl Unpin for MapMemoryObjectError","synthetic":true,"types":[]},{"text":"impl Unpin for SendMessageError","synthetic":true,"types":[]},{"text":"impl Unpin for RegisterServiceError","synthetic":true,"types":[]},{"text":"impl Unpin for SubscribeToServiceError","synthetic":true,"types":[]},{"text":"impl Unpin for FramebufferInfo","synthetic":true,"types":[]},{"text":"impl Unpin for GetFramebufferError","synthetic":true,"types":[]},{"text":"impl Unpin for PixelFormat","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Unpin for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Unpin for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Unpin for Level","synthetic":true,"types":[]},{"text":"impl Unpin for LevelFilter","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Unpin for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Unpin for FloatErrorKind","synthetic":true,"types":[]}];
implementors["pebble_util"] = [{"text":"impl&lt;T&gt; Unpin for BinaryPrettyPrint&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for InitGuard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()