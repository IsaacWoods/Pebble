var searchIndex = JSON.parse('{\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for…","i":[[8,"BitField","bit_field","A generic trait which provides methods for extracting and…",null,null],[18,"BIT_LENGTH","","The number of bits in this bit field.",0,null],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",0,[[]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",0,[[["rangebounds",8]]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",0,[[]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",0,[[["rangebounds",8]]]],[8,"BitArray","","",null,null],[10,"bit_length","","Returns the length, eg number of bits, in this bit array.",1,[[]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",1,[[]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",1,[[["rangebounds",8]]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",1,[[]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",1,[[["rangebounds",8]]]]],"p":[[8,"BitField"],[8,"BitArray"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of…","i":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"p":[]},\
"cfg_if":{"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,"cfg_if","cfg_if","The main macro provided by this crate. See crate…",null,null]],"p":[]},\
"hal":{"doc":"","i":[[0,"boot_info","hal","",null,null],[3,"BootInfo","hal::boot_info","",null,null],[12,"magic","","",0,null],[12,"memory_map","","Map of available memory that the kernel. This only…",0,null],[12,"loaded_images","","",0,null],[12,"video_mode","","",0,null],[12,"heap_address","","",0,null],[12,"heap_size","","",0,null],[12,"rsdp_address","","The physical address of the RSDP, the first ACPI table.",0,null],[3,"MemoryMap","","",null,null],[12,"num_entries","","",1,null],[12,"entries","","",1,null],[3,"MemoryMapEntry","","",null,null],[12,"start","","",2,null],[12,"size","","",2,null],[12,"memory_type","","",2,null],[3,"LoadedImages","","",null,null],[12,"num_images","","",3,null],[12,"images","","",3,null],[3,"LoadedImage","","Describes an image loaded from the filesystem by the…",null,null],[12,"name_length","","",4,null],[12,"name","","The bytes of the image\'s name, encoded as UTF-8. Not…",4,null],[12,"num_segments","","",4,null],[12,"segments","","",4,null],[12,"entry_point","","The virtual address at which to start executing the image.",4,null],[12,"capability_stream","","",4,null],[3,"Segment","","",null,null],[12,"physical_address","","",5,null],[12,"virtual_address","","",5,null],[12,"size","","In bytes.",5,null],[12,"flags","","",5,null],[3,"VideoModeInfo","","",null,null],[12,"framebuffer_address","","",6,null],[12,"pixel_format","","",6,null],[12,"width","","",6,null],[12,"height","","",6,null],[12,"stride","","The number of pixels in each scan-line. May be greater…",6,null],[4,"MemoryType","","",null,null],[13,"Conventional","","Memory that can be used freely by the OS.",7,null],[13,"AcpiReclaimable","","Memory that contains ACPI tables. After the OS has…",7,null],[13,"LoadedImage","","Memory occupied by images that the loader has been asked…",7,null],[13,"KernelPageTables","","Memory that is occupied by page tables created by the…",7,null],[13,"KernelHeap","","Memory that has been mapped for the kernel heap.",7,null],[13,"BootInfo","","Memory that is occupied by the boot info constructed by…",7,null],[4,"PixelFormat","","",null,null],[13,"RGB32","","Each pixel is represented by 4 bytes, with the layout:…",8,null],[13,"BGR32","","Each pixel is represented by 4 bytes, with the layout:…",8,null],[17,"BOOT_INFO_MAGIC","","",null,null],[17,"MAX_MEMORY_MAP_ENTRIES","","",null,null],[17,"MAX_LOADED_IMAGES","","",null,null],[17,"MAX_IMAGE_NAME_LENGTH","","This is one less than a power-of-two, because then it\'s…",null,null],[17,"MAX_IMAGE_LOADED_SEGMENTS","","",null,null],[17,"MAX_CAPABILITY_STREAM_LENGTH","","",null,null],[11,"add_entry","","",1,[[["memorymapentry",3]],["result",4]]],[11,"entries","","",1,[[]]],[11,"address_range","","",2,[[],[["range",3],["physicaladdress",3]]]],[11,"frame_range","","",2,[[],[["range",3],["frame",3]]]],[11,"images","","",3,[[]]],[11,"add_image","","",3,[[["loadedimage",3]],["result",4]]],[11,"add_segment","","",4,[[["segment",3]],["result",4]]],[11,"name","","",4,[[]]],[11,"segments","","",4,[[]]],[0,"memory","hal","The HAL memory API tries to model an abstract version of a…",null,null],[3,"Frame","hal::memory","",null,null],[12,"start","","",9,null],[3,"Page","","",null,null],[12,"start","","",10,null],[3,"Flags","","Defines the permissions for a region of memory. Used both…",null,null],[12,"writable","","",11,null],[12,"executable","","",11,null],[12,"user_accessible","","",11,null],[12,"cached","","",11,null],[3,"PhysicalAddress","","Represents a physical address. If the target architecture…",null,null],[3,"VirtualAddress","","Represents a virtual address. On architectures that have…",null,null],[4,"PagingError","","",null,null],[13,"AlreadyMapped","","The virtual memory that is being mapped is already mapped…",12,null],[4,"Size4KiB","","",null,null],[4,"Size2MiB","","",null,null],[4,"Size1GiB","","",null,null],[5,"kibibytes","","",null,[[["kibibytes",6]],["bytes",6]]],[5,"mebibytes","","",null,[[["mebibytes",6]],["bytes",6]]],[5,"gibibytes","","",null,[[["gibibytes",6]],["bytes",6]]],[11,"starts_with","","",9,[[["physicaladdress",3]],["frame",3]]],[11,"contains","","",9,[[["physicaladdress",3]],["frame",3]]],[11,"starts_with","","",10,[[["virtualaddress",3]],["page",3]]],[11,"contains","","",10,[[["virtualaddress",3]],["page",3]]],[11,"new","","Construct a new `PhysicalAddress`. On x86_64, physical…",13,[[],[["option",4],["physicaladdress",3]]]],[11,"align_down","","Align this address to the given alignment, moving…",13,[[],["physicaladdress",3]]],[11,"align_up","","",13,[[],["physicaladdress",3]]],[11,"is_aligned","","",13,[[]]],[11,"checked_add","","",13,[[],["option",4]]],[11,"checked_sub","","",13,[[],["option",4]]],[11,"new","","Construct a new `VirtualAddress`. This will canonicalise…",14,[[],["virtualaddress",3]]],[11,"ptr","","",14,[[]]],[11,"mut_ptr","","",14,[[]]],[11,"canonicalise","","Canonicalise this virtual address. On x86_64, that…",14,[[],["virtualaddress",3]]],[11,"align_down","","Align this address to the given alignment, moving…",14,[[],["virtualaddress",3]]],[11,"align_up","","Align this address to the given alignment, moving upwards…",14,[[],["virtualaddress",3]]],[11,"is_aligned","","",14,[[]]],[11,"checked_add","","",14,[[],["option",4]]],[11,"checked_sub","","",14,[[],["option",4]]],[6,"Bytes","","",null,null],[6,"Kibibytes","","",null,null],[6,"Mebibytes","","",null,null],[6,"Gibibytes","","",null,null],[8,"PageTable","","A `PageTable` allows the manipulation of a set of…",null,null],[10,"new_with_kernel_mapped","","Constructs a new set of page tables, but with the kernel…",15,[[]]],[10,"switch_to","","Install these page tables as the current set.",15,[[]]],[10,"translate","","Get the physical address that a given virtual address is…",15,[[["virtualaddress",3]],[["option",4],["physicaladdress",3]]]],[10,"map","","Map a `Page` to a `Frame` with the given flags.",15,[[["page",3],["flags",3],["frame",3]],[["result",4],["pagingerror",4]]]],[11,"map_range","","Map each `Page` in a range to a corresponding `Frame` with…",15,[[["range",3],["frame",3],["flags",3],["page",3],["range",3]],[["result",4],["pagingerror",4]]]],[10,"map_area","","Map an area of `size` bytes starting at the given address…",15,[[["flags",3],["virtualaddress",3],["physicaladdress",3]],[["result",4],["pagingerror",4]]]],[10,"unmap","","",15,[[["page",3]],[["option",4],["frame",3]]]],[8,"FrameSize","","This trait is implemented by a number of marker types, one…",null,null],[18,"SIZE","","",16,null],[11,"frames_needed","","",16,[[["bytes",6]],["bytes",6]]],[8,"FrameAllocator","","`FrameAllocator` is used to interact with a physical…",null,null],[11,"allocate","","Allocate a `Frame`.",17,[[],["frame",3]]],[10,"allocate_n","","Allocate `n` contiguous `Frame`s.",17,[[],[["range",3],["frame",3]]]],[10,"free_n","","Free `n` frames that were previously allocated by this…",17,[[["frame",3]]]],[14,"frame_size","hal","",null,null],[11,"from","hal::boot_info","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","hal::memory","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",14,[[],["virtualaddress",3]]],[11,"from","","",14,[[],["virtualaddress",3]]],[11,"fmt","hal::boot_info","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","hal::memory","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"sub","","",13,[[]]],[11,"sub","","",14,[[]]],[11,"eq","hal::boot_info","",7,[[["memorytype",4]]]],[11,"eq","","",8,[[["pixelformat",4]]]],[11,"eq","hal::memory","",9,[[["frame",3]]]],[11,"ne","","",9,[[["frame",3]]]],[11,"eq","","",10,[[["page",3]]]],[11,"ne","","",10,[[["page",3]]]],[11,"eq","","",11,[[["flags",3]]]],[11,"ne","","",11,[[["flags",3]]]],[11,"eq","","",13,[[["physicaladdress",3]]]],[11,"ne","","",13,[[["physicaladdress",3]]]],[11,"eq","","",14,[[["virtualaddress",3]]]],[11,"ne","","",14,[[["virtualaddress",3]]]],[11,"eq","","",18,[[["size4kib",4]]]],[11,"eq","","",19,[[["size2mib",4]]]],[11,"eq","","",20,[[["size1gib",4]]]],[11,"cmp","","",9,[[["frame",3]],["ordering",4]]],[11,"cmp","","",10,[[["page",3]],["ordering",4]]],[11,"cmp","","",13,[[["physicaladdress",3]],["ordering",4]]],[11,"cmp","","",14,[[["virtualaddress",3]],["ordering",4]]],[11,"cmp","","",18,[[["size4kib",4]],["ordering",4]]],[11,"cmp","","",19,[[["size2mib",4]],["ordering",4]]],[11,"cmp","","",20,[[["size1gib",4]],["ordering",4]]],[11,"partial_cmp","","",9,[[["frame",3]],[["ordering",4],["option",4]]]],[11,"lt","","",9,[[["frame",3]]]],[11,"le","","",9,[[["frame",3]]]],[11,"gt","","",9,[[["frame",3]]]],[11,"ge","","",9,[[["frame",3]]]],[11,"partial_cmp","","",10,[[["page",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["page",3]]]],[11,"le","","",10,[[["page",3]]]],[11,"gt","","",10,[[["page",3]]]],[11,"ge","","",10,[[["page",3]]]],[11,"partial_cmp","","",13,[[["physicaladdress",3]],[["ordering",4],["option",4]]]],[11,"lt","","",13,[[["physicaladdress",3]]]],[11,"le","","",13,[[["physicaladdress",3]]]],[11,"gt","","",13,[[["physicaladdress",3]]]],[11,"ge","","",13,[[["physicaladdress",3]]]],[11,"partial_cmp","","",14,[[["virtualaddress",3]],[["ordering",4],["option",4]]]],[11,"lt","","",14,[[["virtualaddress",3]]]],[11,"le","","",14,[[["virtualaddress",3]]]],[11,"gt","","",14,[[["virtualaddress",3]]]],[11,"ge","","",14,[[["virtualaddress",3]]]],[11,"partial_cmp","","",18,[[["size4kib",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",19,[[["size2mib",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",20,[[["size1gib",4]],[["ordering",4],["option",4]]]],[11,"add","","",9,[[]]],[11,"add","","",10,[[]]],[11,"add","","",11,[[]]],[11,"add","","",13,[[]]],[11,"add","","",14,[[]]],[11,"add_assign","","",9,[[]]],[11,"add_assign","","",10,[[]]],[11,"add_assign","","",13,[[]]],[11,"add_assign","","",14,[[]]],[11,"sub_assign","","",13,[[]]],[11,"sub_assign","","",14,[[]]],[11,"steps_between","","",9,[[],["option",4]]],[11,"forward_checked","","",9,[[],["option",4]]],[11,"backward_checked","","",9,[[],["option",4]]],[11,"steps_between","","",10,[[],["option",4]]],[11,"forward_checked","","",10,[[],["option",4]]],[11,"backward_checked","","",10,[[],["option",4]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"clone","hal::boot_info","",1,[[],["memorymap",3]]],[11,"clone","","",7,[[],["memorytype",4]]],[11,"clone","","",2,[[],["memorymapentry",3]]],[11,"clone","","",4,[[],["loadedimage",3]]],[11,"clone","","",5,[[],["segment",3]]],[11,"clone","","",6,[[],["videomodeinfo",3]]],[11,"clone","","",8,[[],["pixelformat",4]]],[11,"clone","hal::memory","",9,[[],["frame",3]]],[11,"clone","","",10,[[],["page",3]]],[11,"clone","","",11,[[],["flags",3]]],[11,"clone","","",13,[[],["physicaladdress",3]]],[11,"clone","","",14,[[],["virtualaddress",3]]],[11,"clone","","",18,[[],["size4kib",4]]],[11,"clone","","",19,[[],["size2mib",4]]],[11,"clone","","",20,[[],["size1gib",4]]],[11,"default","hal::boot_info","",0,[[],["bootinfo",3]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"default","","",3,[[]]],[11,"default","","",4,[[],["loadedimage",3]]],[11,"default","","",5,[[],["segment",3]]],[11,"default","hal::memory","",11,[[]]],[11,"default","","",13,[[],["physicaladdress",3]]],[11,"default","","",14,[[],["virtualaddress",3]]],[11,"map_range","","Map each `Page` in a range to a corresponding `Frame` with…",15,[[["range",3],["frame",3],["flags",3],["page",3],["range",3]],[["result",4],["pagingerror",4]]]]],"p":[[3,"BootInfo"],[3,"MemoryMap"],[3,"MemoryMapEntry"],[3,"LoadedImages"],[3,"LoadedImage"],[3,"Segment"],[3,"VideoModeInfo"],[4,"MemoryType"],[4,"PixelFormat"],[3,"Frame"],[3,"Page"],[3,"Flags"],[4,"PagingError"],[3,"PhysicalAddress"],[3,"VirtualAddress"],[8,"PageTable"],[8,"FrameSize"],[8,"FrameAllocator"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Size1GiB"]]},\
"kernel":{"doc":"","i":[[5,"load_task","kernel","",null,[[["loadedimage",3],["physicalmemorymanager",3],["scheduler",3],["kernelstackallocator",3]]]],[5,"create_framebuffer","","",null,[[["videomodeinfo",3]]]],[0,"heap_allocator","","",null,null],[3,"HoleAllocator","kernel::heap_allocator","",null,null],[12,"heap_bottom","","",0,null],[12,"heap_size","","",0,null],[12,"holes","","",0,null],[3,"LockedHoleAllocator","","",null,null],[12,"0","","",1,null],[3,"HoleInfo","","",null,null],[12,"addr","","",2,null],[12,"size","","",2,null],[3,"Hole","","",null,null],[12,"size","","",3,null],[12,"next","","",3,null],[3,"HoleList","","",null,null],[12,"first","","",4,null],[3,"Allocation","","",null,null],[12,"info","","",5,null],[12,"front_padding","","",5,null],[12,"back_padding","","",5,null],[5,"split_hole","","Split the given hole into…",null,[[["holeinfo",3],["layout",3]],[["option",4],["allocation",3]]]],[5,"allocate_first_fit","","",null,[[["layout",3],["hole",3]],[["allocerr",3],["result",4],["allocation",3]]]],[5,"free","","Walk the list, starting at `hole` and free the allocation…",null,[[["virtualaddress",3],["hole",3]]]],[5,"handle_alloc_error","","",null,[[["layout",3]]]],[11,"new_uninitialized","","Create a new, uninitialized `HoleAllocator`. Before heap…",0,[[],["holeallocator",3]]],[11,"init","","Initialise the `HoleAllocator`. This should only be called…",0,[[["virtualaddress",3]]]],[11,"new_uninitialized","","",1,[[],["lockedholeallocator",3]]],[11,"info","","",3,[[],["holeinfo",3]]],[11,"new","","Create a new `HoleList` that contains the given hole.…",4,[[["virtualaddress",3]],["holelist",3]]],[11,"allocate_first_fit","","Search for a big enough hole for the given `Layout` with…",4,[[["layout",3]],[["allocerr",3],["result",4]]]],[11,"free","","Free an allocation defined by `ptr` and `layout`. Unsafe…",4,[[["layout",3]]]],[11,"get_min_size","","",4,[[]]],[0,"memory","kernel","",null,null],[3,"KernelStackAllocator","kernel::memory","",null,null],[12,"kernel_stack_slots","","",6,null],[12,"slot_size","","",6,null],[12,"_phantom","","",6,null],[3,"SlabAllocator","","",null,null],[12,"bottom","","",7,null],[12,"top","","",7,null],[12,"slab_size","","",7,null],[12,"bitmap","","",7,null],[3,"PhysicalMemoryManager","","",null,null],[12,"buddy","","",8,null],[3,"Stack","","Represents a stack, either in kernel-space or user-space.…",null,null],[12,"top","","",9,null],[12,"slot_bottom","","",9,null],[12,"stack_bottom","","",9,null],[0,"buddy_allocator","","This module implements a buddy allocator, an efficient…",null,null],[3,"BuddyAllocator","kernel::memory::buddy_allocator","",null,null],[12,"bins","","The bins of free blocks, where bin `i` contains blocks of…",10,null],[17,"MAX_ORDER","","The largest block stored by the buddy allocator is…",null,null],[17,"NUM_BINS","","",null,null],[17,"BASE_SIZE","","The \\\"base\\\" block size - the smallest block size this…",null,null],[11,"new","","",10,[[],["buddyallocator",3]]],[11,"add_range","","Add a range of `Frame`s to this allocator, marking them…",10,[[["range",3],["frame",3]]]],[11,"allocate_n","","Allocate (at least) `n` contiguous bytes from this…",10,[[],[["option",4],["physicaladdress",3]]]],[11,"free_n","","Free the given block (starting at `start` and of size `n`…",10,[[["physicaladdress",3]]]],[11,"allocate_block","","Tries to allocate a block of the given order. If no blocks…",10,[[],[["option",4],["physicaladdress",3]]]],[11,"free_block","","Free a block starting at `start` of order `order`.",10,[[["physicaladdress",3]]]],[11,"buddy_of","","Finds the starting frame of the block that is the buddy of…",10,[[["physicaladdress",3]],["physicaladdress",3]]],[0,"kernel_stack_allocator","kernel::memory","",null,null],[3,"KernelStackAllocator","kernel::memory::kernel_stack_allocator","",null,null],[12,"kernel_stack_slots","","",6,null],[12,"slot_size","","",6,null],[12,"_phantom","","",6,null],[11,"new","kernel::memory","",6,[[["virtualaddress",3]],["kernelstackallocator",3]]],[11,"alloc_kernel_stack","","",6,[[["physicalmemorymanager",3]],[["option",4],["stack",3]]]],[0,"slab_allocator","","",null,null],[3,"SlabAllocator","kernel::memory::slab_allocator","",null,null],[12,"bottom","","",7,null],[12,"top","","",7,null],[12,"slab_size","","",7,null],[12,"bitmap","","",7,null],[11,"new","kernel::memory","",7,[[["virtualaddress",3]],["slaballocator",3]]],[11,"alloc","","Try to allocate a slab out of the allocator. Returns…",7,[[],[["option",4],["virtualaddress",3]]]],[11,"free","","",7,[[["virtualaddress",3]]]],[11,"new","","",8,[[["bootinfo",3]],["physicalmemorymanager",3]]],[11,"alloc_bytes","","TODO: not sure this is the best interface to provide",8,[[],["physicaladdress",3]]],[0,"object","kernel","",null,null],[3,"KernelObjectId","kernel::object","Each kernel object is assigned a unique 64-bit ID, which…",null,null],[12,"0","","",11,null],[5,"alloc_kernel_object_id","","",null,[[],["kernelobjectid",3]]],[0,"address_space","","",null,null],[3,"AddressSpace","kernel::object::address_space","",null,null],[12,"id","","",12,null],[12,"owner","","",12,null],[12,"state","","",12,null],[12,"memory_objects","","",12,null],[12,"page_table","","",12,null],[12,"user_stack_allocator","","",12,null],[4,"State","","",null,null],[13,"NotActive","","",13,null],[13,"Active","","",13,null],[17,"USER_STACK_BOTTOM","","",null,null],[17,"USER_STACK_TOP","","",null,null],[17,"USER_STACK_SLOT_SIZE","","",null,null],[11,"new","","",12,[[["kernelobjectid",3]],[["addressspace",3],["arc",3]]]],[11,"map_memory_object","","",12,[[["arc",3],["physicalmemorymanager",3],["memoryobject",3]],[["result",4],["mapmemoryobjecterror",4]]]],[11,"alloc_user_stack","","Try to allocate a slot for a user stack, and map…",12,[[["physicalmemorymanager",3]],[["option",4],["stack",3]]]],[11,"switch_to","","",12,[[]]],[11,"switch_from","","",12,[[]]],[0,"channel","kernel::object","",null,null],[3,"ChannelEnd","kernel::object::channel","",null,null],[12,"id","","",14,null],[12,"owner","","",14,null],[12,"messages","","",14,null],[12,"other_end","","The other end of the channel. If this is `None`, the…",14,null],[3,"Message","","",null,null],[12,"bytes","","",15,null],[12,"handle_objects","","",15,null],[11,"new_channel","","",14,[[["kernelobjectid",3]]]],[11,"new_kernel_channel","","",14,[[["kernelobjectid",3]],[["channelend",3],["arc",3]]]],[0,"memory_object","kernel::object","",null,null],[3,"MemoryObject","kernel::object::memory_object","",null,null],[12,"id","","",16,null],[12,"owner","","",16,null],[12,"virtual_address","","",16,null],[12,"physical_address","","",16,null],[12,"size","","Size of this MemoryObject in bytes.",16,null],[12,"flags","","",16,null],[11,"new","","",16,[[["flags",3],["kernelobjectid",3],["virtualaddress",3],["physicaladdress",3]],[["arc",3],["memoryobject",3]]]],[11,"from_boot_info","","",16,[[["segment",3],["kernelobjectid",3]],[["arc",3],["memoryobject",3]]]],[0,"task","kernel::object","",null,null],[3,"Task","kernel::object::task","",null,null],[12,"id","","",17,null],[12,"owner","","",17,null],[12,"name","","",17,null],[12,"address_space","","",17,null],[12,"state","","",17,null],[12,"capabilities","","",17,null],[12,"user_stack","","",17,null],[12,"kernel_stack","","",17,null],[12,"kernel_stack_pointer","","",17,null],[12,"user_stack_pointer","","",17,null],[12,"handles","","",17,null],[12,"next_handle","","",17,null],[4,"TaskBlock","","",null,null],[4,"TaskState","","",null,null],[13,"Ready","","",18,null],[13,"Running","","",18,null],[13,"Blocked","","",18,null],[4,"TaskCreationError","","",null,null],[13,"InvalidName","","The task name is not valid UTF-8.",19,null],[13,"NameTooLong","","The loader can only load tasks that have a name that can…",19,null],[13,"InvalidCapabilityEncoding","","The byte stream describing the capabilities of an image is…",19,null],[13,"AddressSpaceFull","","The `AddressSpace` that this task has been created in…",19,null],[13,"NoKernelStackSlots","","The kernel stack allocator has run out of slots - this…",19,null],[5,"decode_capabilities","","Decode a capability stream (as found in a task\'s image)…",null,[[],[["vec",3],["result",4],["taskcreationerror",4]]]],[11,"from_boot_info","","",17,[[["loadedimage",3],["addressspace",3],["physicalmemorymanager",3],["kernelobjectid",3],["kernelstackallocator",3],["arc",3]],[["result",4],["arc",3],["taskcreationerror",4]]]],[11,"add_handle","","",17,[[["arc",3],["kernelobject",8]],["handle",3]]],[7,"KERNEL_OBJECT_ID_COUNTER","kernel::object","The next available `KernelObjectId`. It is shared between…",null,null],[17,"SENTINEL_KERNEL_ID","","A kernel object ID of `0` is reserved as a sentinel value…",null,null],[8,"KernelObject","","This trait should be implemented by all types that…",null,null],[10,"id","","",20,[[],["kernelobjectid",3]]],[11,"is","","Returns true if the trait object wraps an object of type…",20,[[]]],[11,"downcast","","Returns a boxed object from a boxed trait object if the…",20,[[["box",3]],[["result",4],["box",3],["box",3]]]],[11,"downcast_rc","","Returns an `$crate::alloc_reexport::rc::Rc`-ed object from…",20,[[["rc",3]],[["rc",3],["rc",3],["result",4]]]],[11,"downcast_ref","","Returns a reference to the object within the trait object…",20,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the object within the trait…",20,[[],["option",4]]],[11,"downcast_arc","","Returns an `Arc`-ed object from an `Arc`-ed trait object…",20,[[["arc",3]],[["arc",3],["arc",3],["result",4]]]],[0,"per_cpu","kernel","",null,null],[8,"PerCpu","kernel::per_cpu","",null,null],[10,"scheduler","","",21,[[["pin",3]],[["pin",3],["scheduler",3]]]],[10,"set_kernel_stack_pointer","","",21,[[["virtualaddress",3],["pin",3]]]],[10,"get_user_stack_pointer","","",21,[[["pin",3]],["virtualaddress",3]]],[10,"set_user_stack_pointer","","",21,[[["virtualaddress",3],["pin",3]]]],[0,"scheduler","kernel","",null,null],[3,"Scheduler","kernel::scheduler","",null,null],[12,"running_task","","",22,null],[12,"ready_queue","","List of Tasks ready to be scheduled. Every kernel object…",22,null],[12,"blocked_queue","","",22,null],[11,"new","","",22,[[],["scheduler",3]]],[11,"add_task","","",22,[[["arc",3],["task",3]]]],[11,"drop_to_userspace","","Performs the first transistion from the kernel into…",22,[[]]],[11,"switch_to_next","","Switch to the next scheduled task. This is called when a…",22,[[["taskstate",4]]]],[0,"syscall","kernel","",null,null],[5,"handle_syscall","kernel::syscall","This is the architecture-independent syscall handler. It…",null,[[]]],[5,"yield_syscall","","",null,[[]]],[5,"early_log","","",null,[[["arc",3]],[["result",4],["earlylogerror",4]]]],[5,"get_framebuffer","","",null,[[["arc",3]],[["result",4],["getframebuffererror",4],["handle",3]]]],[5,"create_memory_object","","",null,[[["arc",3]],[["creatememoryobjecterror",4],["handle",3],["result",4]]]],[5,"map_memory_object","","",null,[[["arc",3]],[["result",4],["mapmemoryobjecterror",4]]]],[5,"send_message","","",null,[[["arc",3]],[["sendmessageerror",4],["result",4]]]],[5,"register_service","","",null,[[["arc",3]],[["registerserviceerror",4],["handle",3],["result",4]]]],[5,"subscribe_to_service","","",null,[[["arc",3]],[["result",4],["handle",3],["subscribetoserviceerror",4]]]],[0,"validation","","This module contains functions that help us validate the…",null,null],[3,"UserPointer","kernel::syscall::validation","",null,null],[12,"ptr","","",23,null],[12,"can_write","","",23,null],[3,"UserSlice","","Represents a slice of `T`s in userspace.",null,null],[12,"length","","",24,null],[12,"ptr","","",24,null],[12,"_phantom","","",24,null],[3,"UserString","","",null,null],[12,"0","","",25,null],[11,"new","","",23,[[],["userpointer",3]]],[11,"read","","",23,[[],["result",4]]],[11,"write","","",23,[[],["result",4]]],[11,"new","","",24,[[],["userslice",3]]],[11,"validate_read","","",24,[[],["result",4]]],[11,"new","","",25,[[],["userstring",3]]],[11,"validate","","",25,[[],["result",4]]],[7,"SERVICE_MAP","kernel::syscall","Maps the name of a service to the channel used to register…",null,null],[7,"ALLOCATOR","kernel","",null,null],[7,"PHYSICAL_MEMORY_MANAGER","","",null,null],[7,"FRAMEBUFFER","","",null,null],[8,"Platform","","",null,null],[16,"PageTableSize","","",26,null],[16,"PageTable","","",26,null],[16,"PerCpu","","",26,null],[10,"kernel_page_table","","",26,[[]]],[10,"per_cpu","","Get the per-CPU info for the current CPU. To make this…",26,[[],["pin",3]]],[10,"initialize_task_kernel_stack","","Often, the kernel stack of a task must be initialized to…",26,[[["virtualaddress",3],["virtualaddress",3]]]],[10,"context_switch","","Do the final part of a context switch: save all the state…",26,[[["virtualaddress",3]]]],[10,"drop_into_userspace","","Do the actual drop into usermode. This assumes that the…",26,[[["virtualaddress",3]]]],[11,"from","kernel::heap_allocator","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"into_any","","",0,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",0,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",0,[[],["any",8]]],[11,"as_any_mut","","",0,[[],["any",8]]],[11,"into_any_arc","","",0,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"into_any","","",1,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",1,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",1,[[],["any",8]]],[11,"as_any_mut","","",1,[[],["any",8]]],[11,"into_any_arc","","",1,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"into_any","","",2,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",2,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",2,[[],["any",8]]],[11,"as_any_mut","","",2,[[],["any",8]]],[11,"into_any_arc","","",2,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_any","","",3,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",3,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",3,[[],["any",8]]],[11,"as_any_mut","","",3,[[],["any",8]]],[11,"into_any_arc","","",3,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_any","","",4,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",4,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",4,[[],["any",8]]],[11,"as_any_mut","","",4,[[],["any",8]]],[11,"into_any_arc","","",4,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"into_any","","",5,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",5,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",5,[[],["any",8]]],[11,"as_any_mut","","",5,[[],["any",8]]],[11,"into_any_arc","","",5,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::memory","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"into_any","","",6,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",6,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",6,[[],["any",8]]],[11,"as_any_mut","","",6,[[],["any",8]]],[11,"into_any_arc","","",6,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_any","","",7,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",7,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",7,[[],["any",8]]],[11,"as_any_mut","","",7,[[],["any",8]]],[11,"into_any_arc","","",7,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"into_any","","",8,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",8,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",8,[[],["any",8]]],[11,"as_any_mut","","",8,[[],["any",8]]],[11,"into_any_arc","","",8,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"into_any","","",9,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",9,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",9,[[],["any",8]]],[11,"as_any_mut","","",9,[[],["any",8]]],[11,"into_any_arc","","",9,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::memory::buddy_allocator","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"into_any","","",10,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",10,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",10,[[],["any",8]]],[11,"as_any_mut","","",10,[[],["any",8]]],[11,"into_any_arc","","",10,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::object","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"into_any","","",11,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",11,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",11,[[],["any",8]]],[11,"as_any_mut","","",11,[[],["any",8]]],[11,"into_any_arc","","",11,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::object::address_space","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"into_any","","",12,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",12,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",12,[[],["any",8]]],[11,"as_any_mut","","",12,[[],["any",8]]],[11,"into_any_arc","","",12,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"into_any","","",13,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",13,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",13,[[],["any",8]]],[11,"as_any_mut","","",13,[[],["any",8]]],[11,"into_any_arc","","",13,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::object::channel","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"into_any","","",14,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",14,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",14,[[],["any",8]]],[11,"as_any_mut","","",14,[[],["any",8]]],[11,"into_any_arc","","",14,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"into_any","","",15,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",15,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",15,[[],["any",8]]],[11,"as_any_mut","","",15,[[],["any",8]]],[11,"into_any_arc","","",15,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::object::memory_object","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"into_any","","",16,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",16,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",16,[[],["any",8]]],[11,"as_any_mut","","",16,[[],["any",8]]],[11,"into_any_arc","","",16,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::object::task","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"into_any","","",17,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",17,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",17,[[],["any",8]]],[11,"as_any_mut","","",17,[[],["any",8]]],[11,"into_any_arc","","",17,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"into_any","","",27,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",27,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",27,[[],["any",8]]],[11,"as_any_mut","","",27,[[],["any",8]]],[11,"into_any_arc","","",27,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"into_any","","",18,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",18,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",18,[[],["any",8]]],[11,"as_any_mut","","",18,[[],["any",8]]],[11,"into_any_arc","","",18,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"into_any","","",19,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",19,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",19,[[],["any",8]]],[11,"as_any_mut","","",19,[[],["any",8]]],[11,"into_any_arc","","",19,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::scheduler","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"into_any","","",22,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",22,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",22,[[],["any",8]]],[11,"as_any_mut","","",22,[[],["any",8]]],[11,"into_any_arc","","",22,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","kernel::syscall::validation","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"into_any","","",23,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",23,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",23,[[],["any",8]]],[11,"as_any_mut","","",23,[[],["any",8]]],[11,"from","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"into_any","","",24,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",24,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",24,[[],["any",8]]],[11,"as_any_mut","","",24,[[],["any",8]]],[11,"from","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"into_any","","",25,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",25,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",25,[[],["any",8]]],[11,"as_any_mut","","",25,[[],["any",8]]],[11,"into_any_arc","","",25,[[["arc",3]],[["arc",3],["any",8]]]],[11,"id","kernel::object::address_space","",12,[[],["kernelobjectid",3]]],[11,"id","kernel::object::channel","",14,[[],["kernelobjectid",3]]],[11,"id","kernel::object::memory_object","",16,[[],["kernelobjectid",3]]],[11,"id","kernel::object::task","",17,[[],["kernelobjectid",3]]],[11,"deref","kernel::heap_allocator","",1,[[],["mutex",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::memory","",9,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::object::address_space","",13,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::object::task","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","kernel::object","",11,[[["formatter",3]],["result",6]]],[11,"eq","kernel::object::address_space","",13,[[["state",4]]]],[11,"eq","kernel::object::task","",27,[[["taskblock",4]]]],[11,"eq","","",18,[[["taskstate",4]]]],[11,"ne","","",18,[[["taskstate",4]]]],[11,"eq","kernel::object","",11,[[["kernelobjectid",3]]]],[11,"ne","","",11,[[["kernelobjectid",3]]]],[11,"cmp","","",11,[[["kernelobjectid",3]],["ordering",4]]],[11,"partial_cmp","","",11,[[["kernelobjectid",3]],[["ordering",4],["option",4]]]],[11,"lt","","",11,[[["kernelobjectid",3]]]],[11,"le","","",11,[[["kernelobjectid",3]]]],[11,"gt","","",11,[[["kernelobjectid",3]]]],[11,"ge","","",11,[[["kernelobjectid",3]]]],[11,"hash","","",11,[[]]],[11,"clone","kernel::heap_allocator","",2,[[],["holeinfo",3]]],[11,"clone","","",5,[[],["allocation",3]]],[11,"clone","kernel::memory","",9,[[],["stack",3]]],[11,"clone","kernel::object::task","",27,[[],["taskblock",4]]],[11,"clone","","",18,[[],["taskstate",4]]],[11,"clone","kernel::object","",11,[[],["kernelobjectid",3]]],[11,"alloc","kernel::heap_allocator","",1,[[["layout",3]]]],[11,"dealloc","","",1,[[["layout",3]]]],[11,"allocate_n","kernel::memory","",8,[[],[["frame",3],["range",3]]]],[11,"free_n","","",8,[[["frame",3]]]]],"p":[[3,"HoleAllocator"],[3,"LockedHoleAllocator"],[3,"HoleInfo"],[3,"Hole"],[3,"HoleList"],[3,"Allocation"],[3,"KernelStackAllocator"],[3,"SlabAllocator"],[3,"PhysicalMemoryManager"],[3,"Stack"],[3,"BuddyAllocator"],[3,"KernelObjectId"],[3,"AddressSpace"],[4,"State"],[3,"ChannelEnd"],[3,"Message"],[3,"MemoryObject"],[3,"Task"],[4,"TaskState"],[4,"TaskCreationError"],[8,"KernelObject"],[8,"PerCpu"],[3,"Scheduler"],[3,"UserPointer"],[3,"UserSlice"],[3,"UserString"],[8,"Platform"],[4,"TaskBlock"]]},\
"libpebble":{"doc":"","i":[[3,"Handle","libpebble","A `Handle` is used to represent a task\'s access to a…",null,null],[12,"0","","",0,null],[0,"caps","","",null,null],[3,"CapabilitiesRepr","libpebble::caps","`N` must be a multiple of 4, and padded with zeros, so the…",null,null],[4,"Capability","","",null,null],[13,"CreateAddressSpace","","",1,null],[13,"CreateMemoryObject","","",1,null],[13,"CreateTask","","",1,null],[13,"X86_64AccessIoPort","","",1,null],[13,"GetFramebuffer","","",1,null],[13,"EarlyLogging","","",1,null],[13,"ServiceProvider","","",1,null],[13,"ServiceUser","","",1,null],[17,"CAP_PADDING","","",null,null],[17,"CAP_CREATE_ADDRESS_SPACE","","",null,null],[17,"CAP_CREATE_MEMORY_OBJECT","","",null,null],[17,"CAP_CREATE_TASK","","",null,null],[17,"CAP_BASE_X86_64","","",null,null],[17,"CAP_GET_FRAMEBUFFER","","",null,null],[17,"CAP_EARLY_LOGGING","","",null,null],[17,"CAP_SERVICE_PROVIDER","","",null,null],[17,"CAP_SERVICE_USER","","",null,null],[11,"new","","",2,[[],["capabilitiesrepr",3]]],[0,"syscall","libpebble","",null,null],[4,"EarlyLogError","libpebble::syscall","",null,null],[13,"MessageTooLong","","",3,null],[13,"MessageNotValidUtf8","","",3,null],[13,"TaskDoesNotHaveCorrectCapability","","",3,null],[4,"CreateMemoryObjectError","","",null,null],[13,"InvalidVirtualAddress","","",4,null],[13,"InvalidFlags","","",4,null],[13,"InvalidSize","","",4,null],[4,"MapMemoryObjectError","","",null,null],[13,"InvalidHandle","","",5,null],[13,"RegionAlreadyMapped","","",5,null],[13,"NotAMemoryObject","","",5,null],[13,"NotAnAddressSpace","","",5,null],[13,"AddressPointerInvalid","","",5,null],[4,"SendMessageError","","",null,null],[13,"ChannelCannotSend","","The `Channel` handle must have the `SEND` right to use the…",6,null],[13,"CannotTransferHandle","","Transferred handles must have the `TRANSFER` right.",6,null],[13,"BytesAddressInvalid","","",6,null],[13,"TooManyBytes","","",6,null],[13,"HandlesAddressInvalid","","",6,null],[13,"TooManyHandles","","",6,null],[4,"RegisterServiceError","","",null,null],[13,"TaskDoesNotHaveCorrectCapability","","",7,null],[13,"NamePointerNotValid","","",7,null],[13,"NameLengthNotValid","","Name must be greater than `0` bytes, and not greater than…",7,null],[4,"SubscribeToServiceError","","",null,null],[13,"TaskDoesNotHaveCorrectCapability","","",8,null],[13,"NamePointerNotValid","","",8,null],[13,"NameLengthNotValid","","Name must be greater than `0` bytes, and not greater than…",8,null],[13,"NoServiceWithThatName","","",8,null],[5,"yield_to_kernel","","",null,[[]]],[5,"early_log","","",null,[[],[["earlylogerror",4],["result",4]]]],[5,"create_memory_object","","Create a MemoryObject kernel object at the given virtual…",null,[[],[["handle",3],["result",4],["creatememoryobjecterror",4]]]],[5,"map_memory_object","","",null,[[["handle",3]],[["result",4],["mapmemoryobjecterror",4]]]],[5,"send_message","","",null,[[["handle",3]],[["result",4],["sendmessageerror",4]]]],[5,"register_service","","",null,[[],[["handle",3],["result",4],["registerserviceerror",4]]]],[5,"subscribe_to_service","","",null,[[],[["result",4],["handle",3],["subscribetoserviceerror",4]]]],[0,"get_framebuffer","","",null,null],[3,"FramebufferInfo","libpebble::syscall::get_framebuffer","",null,null],[12,"width","","",9,null],[12,"height","","",9,null],[12,"stride","","",9,null],[12,"pixel_format","","",9,null],[4,"GetFramebufferError","","",null,null],[13,"AccessDenied","","The calling task does not have the correct capability to…",10,null],[13,"InfoAddressIsInvalid","","The address passed in `a` to write the info struct into…",10,null],[13,"NoFramebufferCreated","","The kernel did not create a framebuffer.",10,null],[4,"PixelFormat","","Describes how the supplied framebuffer represents pixels.",null,null],[13,"RGB32","","",11,null],[13,"BGR32","","",11,null],[5,"get_framebuffer","","",null,[[],[["handle",3],["result",4],["getframebuffererror",4]]]],[0,"result","libpebble::syscall","",null,null],[5,"status_from_syscall_repr","libpebble::syscall::result","",null,[[],["result",4]]],[5,"status_to_syscall_repr","","",null,[[["result",4]]]],[5,"handle_from_syscall_repr","","",null,[[],[["handle",3],["result",4]]]],[5,"handle_to_syscall_repr","","",null,[[["handle",3],["result",4]]]],[0,"raw_x86_64","libpebble::syscall","",null,null],[5,"syscall0","libpebble::syscall::raw_x86_64","",null,[[]]],[5,"syscall1","","",null,[[]]],[5,"syscall2","","",null,[[]]],[5,"syscall3","","",null,[[]]],[5,"syscall4","","",null,[[]]],[5,"syscall5","","",null,[[]]],[17,"SYSCALL_YIELD","libpebble::syscall","",null,null],[17,"SYSCALL_EARLY_LOG","","",null,null],[17,"SYSCALL_GET_FRAMEBUFFER","","",null,null],[17,"SYSCALL_CREATE_MEMORY_OBJECT","","",null,null],[17,"SYSCALL_MAP_MEMORY_OBJECT","","",null,null],[17,"SYSCALL_CREATE_CHANNEL","","",null,null],[17,"SYSCALL_SEND_MESSAGE","","",null,null],[17,"SYSCALL_GET_MESSAGE","","",null,null],[17,"SYSCALL_WAIT_FOR_MESSAGE","","",null,null],[17,"SYSCALL_REGISTER_SERVICE","","",null,null],[17,"SYSCALL_SUBSCRIBE_TO_SERVICE","","",null,null],[17,"CHANNEL_MAX_NUM_BYTES","","",null,null],[17,"CHANNEL_MAX_NUM_HANDLES","","",null,null],[17,"SERVICE_NAME_MAX_LENGTH","","",null,null],[17,"ZERO_HANDLE","libpebble","",null,null],[14,"define_error_type","","",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","libpebble::caps","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","libpebble::syscall","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","libpebble::syscall::get_framebuffer","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"fmt","libpebble::caps","",1,[[["formatter",3]],["result",6]]],[11,"fmt","libpebble::syscall::get_framebuffer","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","libpebble::syscall","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","libpebble","",0,[[["formatter",3]],["result",6]]],[11,"eq","libpebble::caps","",1,[[["capability",4]]]],[11,"ne","","",1,[[["capability",4]]]],[11,"eq","libpebble::syscall::get_framebuffer","",11,[[["pixelformat",4]]]],[11,"eq","libpebble","",0,[[["handle",3]]]],[11,"ne","","",0,[[["handle",3]]]],[11,"cmp","","",0,[[["handle",3]],["ordering",4]]],[11,"partial_cmp","","",0,[[["handle",3]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["handle",3]]]],[11,"le","","",0,[[["handle",3]]]],[11,"gt","","",0,[[["handle",3]]]],[11,"ge","","",0,[[["handle",3]]]],[11,"try_from","libpebble::syscall::get_framebuffer","",10,[[],["result",4]]],[11,"try_from","libpebble::syscall","",3,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_from","libpebble","",0,[[],["result",4]]],[11,"into","libpebble::syscall::get_framebuffer","",10,[[]]],[11,"into","libpebble::syscall","",3,[[]]],[11,"into","","",4,[[]]],[11,"into","","",5,[[]]],[11,"into","","",6,[[]]],[11,"into","","",7,[[]]],[11,"into","","",8,[[]]],[11,"clone","libpebble::caps","",1,[[],["capability",4]]],[11,"clone","libpebble::syscall::get_framebuffer","",10,[[],["getframebuffererror",4]]],[11,"clone","","",11,[[],["pixelformat",4]]],[11,"clone","","",9,[[],["framebufferinfo",3]]],[11,"clone","libpebble::syscall","",3,[[],["earlylogerror",4]]],[11,"clone","","",4,[[],["creatememoryobjecterror",4]]],[11,"clone","","",5,[[],["mapmemoryobjecterror",4]]],[11,"clone","","",6,[[],["sendmessageerror",4]]],[11,"clone","","",7,[[],["registerserviceerror",4]]],[11,"clone","","",8,[[],["subscribetoserviceerror",4]]],[11,"clone","libpebble","",0,[[],["handle",3]]]],"p":[[3,"Handle"],[4,"Capability"],[3,"CapabilitiesRepr"],[4,"EarlyLogError"],[4,"CreateMemoryObjectError"],[4,"MapMemoryObjectError"],[4,"SendMessageError"],[4,"RegisterServiceError"],[4,"SubscribeToServiceError"],[3,"FramebufferInfo"],[4,"GetFramebufferError"],[4,"PixelFormat"]]},\
"log":{"doc":"A lightweight logging facade.","i":[[3,"Record","log","The \\\"payload\\\" of a log message.",null,null],[3,"RecordBuilder","","Builder for `Record`.",null,null],[3,"Metadata","","Metadata about a log message.",null,null],[3,"MetadataBuilder","","Builder for `Metadata`.",null,null],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has…",null,null],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn\'t…",null,null],[4,"Level","","An enum representing the available verbosity levels of the…",null,null],[13,"Error","","The \\\"error\\\" level.",0,null],[13,"Warn","","The \\\"warn\\\" level.",0,null],[13,"Info","","The \\\"info\\\" level.",0,null],[13,"Debug","","The \\\"debug\\\" level.",0,null],[13,"Trace","","The \\\"trace\\\" level.",0,null],[4,"LevelFilter","","An enum representing the available verbosity level filters…",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"set_max_level","","Sets the global maximum log level.",null,[[["levelfilter",4]]]],[5,"max_level","","Returns the current maximum log level.",null,[[],["levelfilter",4]]],[5,"set_logger","","Sets the global logger to a `&\'static Log`.",null,[[["log",8]],[["result",4],["setloggererror",3]]]],[5,"set_logger_racy","","A thread-unsafe version of [`set_logger`].",null,[[["log",8]],[["result",4],["setloggererror",3]]]],[5,"logger","","Returns a reference to the logger.",null,[[],["log",8]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata…",2,[[["metadata",3]]]],[10,"log","","Logs the `Record`.",2,[[["record",3]]]],[10,"flush","","Flushes any buffered records.",2,[[]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level",4]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[],["levelfilter",4]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter",4]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[],[["option",4],["level",4]]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder",3]]],[11,"args","","The message body.",3,[[],["arguments",3]]],[11,"metadata","","Metadata about the log directive.",3,[[],["metadata",3]]],[11,"level","","The verbosity level of the message.",3,[[],["level",4]]],[11,"target","","The name of the target of the directive.",3,[[]]],[11,"module_path","","The module path of the message.",3,[[],["option",4]]],[11,"module_path_static","","The module path of the message, if it is a `\'static` string.",3,[[],["option",4]]],[11,"file","","The source file containing the message.",3,[[],["option",4]]],[11,"file_static","","The module path of the message, if it is a `\'static` string.",3,[[],["option",4]]],[11,"line","","The line containing the message.",3,[[],["option",4]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder",3]]],[11,"args","","Set `args`.",4,[[["arguments",3]],["recordbuilder",3]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with…",4,[[["metadata",3]],["recordbuilder",3]]],[11,"level","","Set `Metadata::level`.",4,[[["level",4]],["recordbuilder",3]]],[11,"target","","Set `Metadata::target`",4,[[],["recordbuilder",3]]],[11,"module_path","","Set `module_path`",4,[[["option",4]],["recordbuilder",3]]],[11,"module_path_static","","Set `module_path` to a `\'static` string",4,[[["option",4]],["recordbuilder",3]]],[11,"file","","Set `file`",4,[[["option",4]],["recordbuilder",3]]],[11,"file_static","","Set `file` to a `\'static` string.",4,[[["option",4]],["recordbuilder",3]]],[11,"line","","Set `line`",4,[[["option",4]],["recordbuilder",3]]],[11,"build","","Invoke the builder and return a `Record`",4,[[],["record",3]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder",3]]],[11,"level","","The verbosity level of the message.",5,[[],["level",4]]],[11,"target","","The name of the target of the directive.",5,[[]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder",3]]],[11,"level","","Setter for `level`.",6,[[["level",4]],["metadatabuilder",3]]],[11,"target","","Setter for `target`.",6,[[],["metadatabuilder",3]]],[11,"build","","Returns a `Metadata` object.",6,[[],["metadata",3]]],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in…",null,null],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["level",4]]]],[11,"eq","","",0,[[["levelfilter",4]]]],[11,"eq","","",1,[[["levelfilter",4]]]],[11,"eq","","",1,[[["level",4]]]],[11,"eq","","",5,[[["metadata",3]]]],[11,"ne","","",5,[[["metadata",3]]]],[11,"eq","","",6,[[["metadatabuilder",3]]]],[11,"ne","","",6,[[["metadatabuilder",3]]]],[11,"eq","","",8,[[["parselevelerror",3]]]],[11,"ne","","",8,[[["parselevelerror",3]]]],[11,"cmp","","",0,[[["level",4]],["ordering",4]]],[11,"cmp","","",1,[[["levelfilter",4]],["ordering",4]]],[11,"cmp","","",5,[[["metadata",3]],["ordering",4]]],[11,"cmp","","",6,[[["metadatabuilder",3]],["ordering",4]]],[11,"partial_cmp","","",0,[[["level",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["level",4]]]],[11,"le","","",0,[[["level",4]]]],[11,"gt","","",0,[[["level",4]]]],[11,"ge","","",0,[[["level",4]]]],[11,"partial_cmp","","",0,[[["levelfilter",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["levelfilter",4]]]],[11,"le","","",0,[[["levelfilter",4]]]],[11,"gt","","",0,[[["levelfilter",4]]]],[11,"ge","","",0,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["levelfilter",4]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["levelfilter",4]]]],[11,"le","","",1,[[["levelfilter",4]]]],[11,"gt","","",1,[[["levelfilter",4]]]],[11,"ge","","",1,[[["levelfilter",4]]]],[11,"partial_cmp","","",1,[[["level",4]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["level",4]]]],[11,"le","","",1,[[["level",4]]]],[11,"gt","","",1,[[["level",4]]]],[11,"ge","","",1,[[["level",4]]]],[11,"partial_cmp","","",5,[[["metadata",3]],[["ordering",4],["option",4]]]],[11,"lt","","",5,[[["metadata",3]]]],[11,"le","","",5,[[["metadata",3]]]],[11,"gt","","",5,[[["metadata",3]]]],[11,"ge","","",5,[[["metadata",3]]]],[11,"partial_cmp","","",6,[[["metadatabuilder",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["metadatabuilder",3]]]],[11,"le","","",6,[[["metadatabuilder",3]]]],[11,"gt","","",6,[[["metadatabuilder",3]]]],[11,"ge","","",6,[[["metadatabuilder",3]]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"from_str","","",0,[[],[["result",4],["level",4]]]],[11,"from_str","","",1,[[],[["levelfilter",4],["result",4]]]],[11,"clone","","",0,[[],["level",4]]],[11,"clone","","",1,[[],["levelfilter",4]]],[11,"clone","","",3,[[],["record",3]]],[11,"clone","","",5,[[],["metadata",3]]]],"p":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","i":[[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[11,"div_ceil","","Ceiled integer division.",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",1,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",1,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",2,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",2,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",2,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",2,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",2,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",2,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",2,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",2,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",2,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",2,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",2,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",2,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",2,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",2,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",3,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",3,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",3,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",3,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",3,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",4,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",5,[[]]],[5,"cast","num","Cast from one machine scalar to another.",null,[[],["option",4]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",6,null],[10,"pow","","Returns `self` to the power `rhs`.",6,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,[[]]],[10,"max_value","","returns the largest finite number this type can represent",7,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",9,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",11,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",3,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",3,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",3,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",3,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",3,[[],["option",4]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",12,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",12,[[],["result",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",4,[[],["option",4]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",13,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",13,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",13,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",14,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",14,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",14,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",14,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",14,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",14,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",14,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",14,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",14,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",14,[[]]],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",15,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",15,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",16,[[]]],[10,"abs_sub","","The positive difference of two numbers.",16,[[]]],[10,"signum","","Returns the sign of the number.",16,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",16,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",16,[[]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",2,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",2,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",2,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",2,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",2,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",2,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",2,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",2,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",2,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",2,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",2,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",2,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",2,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",2,[[],["option",4]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",17,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",17,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",17,[[]]],[0,"complex","","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[11,"div_ceil","","Ceiled integer division.",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",1,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",1,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[3,"ExtendedGcd","","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",18,null],[12,"x","","",18,null],[12,"y","","",18,null],[5,"div_rem","","Simultaneous integer division and modulus",null,[[]]],[5,"div_floor","","Floored integer division",null,[[]]],[5,"mod_floor","","Floored integer modulus",null,[[]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[]]],[5,"div_ceil","","Ceiled integer division",null,[[]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,[[]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[]]],[8,"Roots","","Provides methods to compute an integer\'s square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",19,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",19,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",19,[[]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[]]],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[0,"traits","num","",null,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,[[]]],[10,"max_value","","returns the largest finite number this type can represent",7,[[]]],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",2,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",2,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",2,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",2,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",2,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",2,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",2,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",2,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",2,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",2,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",2,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",2,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",2,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",2,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",3,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",3,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",3,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",3,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",3,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",4,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",5,[[]]],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",20,[[]]],[10,"neg_infinity","","Returns negative infinity.",20,[[]]],[10,"nan","","Returns NaN.",20,[[]]],[10,"neg_zero","","Returns `-0.0`.",20,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",20,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",20,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",20,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",20,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",20,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",20,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",20,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",20,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",20,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",20,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",20,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",20,[[]]],[11,"trunc","","Return the integer part of a number.",20,[[]]],[11,"fract","","Returns the fractional part of a number.",20,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",20,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",20,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",20,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",20,[[]]],[11,"min","","Returns the minimum of the two numbers.",20,[[]]],[11,"max","","Returns the maximum of the two numbers.",20,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",20,[[]]],[11,"powi","","Raise a number to an integer power.",20,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",20,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",20,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",20,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",21,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",21,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",21,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",21,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",21,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",21,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",21,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",21,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",21,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",21,[[]]],[10,"LN_10","","Return `ln(10.0)`.",21,[[]]],[10,"LN_2","","Return `ln(2.0)`.",21,[[]]],[10,"LOG10_E","","Return `log10(e)`.",21,[[]]],[10,"LOG2_E","","Return `log2(e)`.",21,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",21,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",21,[[]]],[11,"TAU","","Return the full circle constant `τ`.",21,[[]]],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",17,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",17,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",17,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",13,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",13,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",13,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",14,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",14,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",14,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",14,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",14,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",14,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",14,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",14,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",14,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",14,[[]]],[0,"ops","num::traits","",null,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",11,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",9,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",22,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",23,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",24,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",25,[[],["option",4]]],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",26,null],[10,"inv","","Returns the multiplicative inverse of `self`.",26,[[]]],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",27,null],[10,"mul_add","","Performs the fused multiply-add operation.",27,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",28,[[]]],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",15,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",15,[[]]],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",29,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",30,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",31,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",32,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",33,[[]]],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",6,null],[10,"pow","","Returns `self` to the power `rhs`.",6,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",16,[[]]],[10,"abs_sub","","The positive difference of two numbers.",16,[[]]],[10,"signum","","Returns the sign of the number.",16,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",16,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",16,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",12,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",12,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",34,null],[13,"Invalid","","",34,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",35,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,[[]]],[10,"max_value","","returns the largest finite number this type can represent",7,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",21,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",21,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",21,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",21,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",21,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",21,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",21,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",21,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",21,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",21,[[]]],[10,"LN_10","","Return `ln(10.0)`.",21,[[]]],[10,"LN_2","","Return `ln(2.0)`.",21,[[]]],[10,"LOG10_E","","Return `log10(e)`.",21,[[]]],[10,"LOG2_E","","Return `log2(e)`.",21,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",21,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",21,[[]]],[11,"TAU","","Return the full circle constant `τ`.",21,[[]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",5,[[]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",3,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",3,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",3,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",3,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",3,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",3,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",3,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",3,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",4,[[],["option",4]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",2,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",2,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",2,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",2,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",2,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",2,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",2,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",2,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",2,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",2,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",2,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",2,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",2,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",2,[[],["option",4]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",13,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",13,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",13,[[]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",17,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",17,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",17,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",14,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",14,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",14,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",14,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",14,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",14,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",14,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",14,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",14,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",14,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",14,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",14,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",9,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",23,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",22,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",24,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",25,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",11,[[],["option",4]]],[8,"Inv","","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",26,null],[10,"inv","","Returns the multiplicative inverse of `self`.",26,[[]]],[8,"MulAdd","","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",27,null],[10,"mul_add","","Performs the fused multiply-add operation.",27,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",28,[[]]],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",15,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",15,[[]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",29,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",31,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",32,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",33,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",30,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",6,null],[10,"pow","","Returns `self` to the power `rhs`.",6,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",16,[[]]],[10,"abs_sub","","The positive difference of two numbers.",16,[[]]],[10,"signum","","Returns the sign of the number.",16,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",16,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",16,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between two numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[3,"ParseRatioError","","",null,null],[11,"from","num::complex","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","num::integer","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","num::iter","",38,[[]]],[11,"into_iter","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into_iter","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into_iter","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into_iter","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","num::traits","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","num::rational","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"rem","num::complex","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"zero","","",0,[[],["complex",3]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"one","","",0,[[],["complex",3]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"from","","",0,[[],["complex",3]]],[11,"from","","",0,[[],["complex",3]]],[11,"eq","","",36,[[["parsecomplexerror",3]]]],[11,"ne","","",36,[[["parsecomplexerror",3]]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"default","","",0,[[],["complex",3]]],[11,"sum","","",0,[[],["complex",3]]],[11,"sum","","",0,[[],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",36,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"product","","",0,[[],["complex",3]]],[11,"product","","",0,[[],["complex",3]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],[["result",4],["complex",3]]]],[11,"from_usize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_isize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f64","","",0,[[],[["option",4],["complex",3]]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"as_","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],[["result",4],["complex",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"from","","",0,[[],[["option",4],["complex",3]]]],[11,"neg","","",0,[[]]],[11,"mul_add","","",0,[[["complex",3]],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[["complex",3]]]],[11,"hash","","",0,[[]]],[11,"inv","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",36,[[["formatter",3]],[["result",4],["error",3]]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"clone","","",0,[[],["complex",3]]],[11,"fmt","num::traits","",34,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",35,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",35,[[["formatter",3]],[["result",4],["error",3]]]],[11,"next","num::integer","",37,[[],["option",4]]],[11,"eq","","",18,[[["extendedgcd",3]]]],[11,"ne","","",18,[[["extendedgcd",3]]]],[11,"clone","","",18,[[],["extendedgcd",3]]],[11,"fmt","","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"clone","num::iter","",40,[[],["rangestep",3]]],[11,"clone","","",39,[[],["rangeinclusive",3]]],[11,"clone","","",38,[[],["range",3]]],[11,"clone","","",41,[[],["rangestepinclusive",3]]],[11,"next_back","","",38,[[],["option",4]]],[11,"next_back","","",39,[[],["option",4]]],[11,"next","","",38,[[],["option",4]]],[11,"size_hint","","",38,[[]]],[11,"next","","",41,[[],["option",4]]],[11,"next","","",40,[[],["option",4]]],[11,"next","","",39,[[],["option",4]]],[11,"size_hint","","",39,[[]]],[11,"rem","num::rational","",42,[[["ratio",3]],["ratio",3]]],[11,"rem","","",42,[[["ratio",3]],["ratio",3]]],[11,"rem","","",42,[[],["ratio",3]]],[11,"rem","","",42,[[],["ratio",3]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",42,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",42,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",42,[[],[["ratio",3],["option",4]]]],[11,"rem_assign","","",42,[[["ratio",3]]]],[11,"rem_assign","","",42,[[]]],[11,"rem_assign","","",42,[[["ratio",3]]]],[11,"rem_assign","","",42,[[]]],[11,"from","","",42,[[],["ratio",3]]],[11,"from","","",42,[[],["ratio",3]]],[11,"eq","","",42,[[["ratio",3]]]],[11,"eq","","",43,[[["parseratioerror",3]]]],[11,"ne","","",43,[[["parseratioerror",3]]]],[11,"sum","","",42,[[],["ratio",3]]],[11,"sum","","",42,[[],["ratio",3]]],[11,"fmt","","",43,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",42,[[["formatter",3]],[["result",4],["error",3]]]],[11,"abs","","",42,[[],["ratio",3]]],[11,"abs_sub","","",42,[[["ratio",3]],["ratio",3]]],[11,"signum","","",42,[[],["ratio",3]]],[11,"is_positive","","",42,[[]]],[11,"is_negative","","",42,[[]]],[11,"mul_assign","","",42,[[["ratio",3]]]],[11,"mul_assign","","",42,[[]]],[11,"mul_assign","","",42,[[]]],[11,"mul_assign","","",42,[[["ratio",3]]]],[11,"product","","",42,[[],["ratio",3]]],[11,"product","","",42,[[],["ratio",3]]],[11,"one","","",42,[[],["ratio",3]]],[11,"is_one","","",42,[[]]],[11,"set_one","","",42,[[]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",42,[[],[["result",4],["ratio",3],["parseratioerror",3]]]],[11,"zero","","",42,[[],["ratio",3]]],[11,"is_zero","","",42,[[]]],[11,"set_zero","","",42,[[]]],[11,"checked_add","","",42,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"partial_cmp","","",42,[[["ratio",3]],[["ordering",4],["option",4]]]],[11,"inv","","",42,[[],["ratio",3]]],[11,"mul","","",42,[[],["ratio",3]]],[11,"mul","","",42,[[],["ratio",3]]],[11,"mul","","",42,[[["ratio",3]],["ratio",3]]],[11,"mul","","",42,[[["ratio",3]],["ratio",3]]],[11,"neg","","",42,[[],["ratio",3]]],[11,"div","","",42,[[],["ratio",3]]],[11,"div","","",42,[[["ratio",3]],["ratio",3]]],[11,"div","","",42,[[["ratio",3]],["ratio",3]]],[11,"div","","",42,[[],["ratio",3]]],[11,"checked_sub","","",42,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"hash","","",42,[[]]],[11,"add","","",42,[[],["ratio",3]]],[11,"add","","",42,[[],["ratio",3]]],[11,"add","","",42,[[["ratio",3]],["ratio",3]]],[11,"add","","",42,[[["ratio",3]],["ratio",3]]],[11,"cmp","","",42,[[["ratio",3]],["ordering",4]]],[11,"sub","","",42,[[["ratio",3]],["ratio",3]]],[11,"sub","","",42,[[],["ratio",3]]],[11,"sub","","",42,[[["ratio",3]],["ratio",3]]],[11,"sub","","",42,[[],["ratio",3]]],[11,"div_assign","","",42,[[]]],[11,"div_assign","","",42,[[]]],[11,"div_assign","","",42,[[["ratio",3]]]],[11,"div_assign","","",42,[[["ratio",3]]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"pow","","",42,[[],["ratio",3]]],[11,"add_assign","","",42,[[["ratio",3]]]],[11,"add_assign","","",42,[[["ratio",3]]]],[11,"add_assign","","",42,[[]]],[11,"add_assign","","",42,[[]]],[11,"into","","",42,[[]]],[11,"fmt","","",43,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",42,[[["formatter",3]],[["result",4],["error",3]]]],[11,"checked_div","","",42,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"sub_assign","","",42,[[]]],[11,"sub_assign","","",42,[[["ratio",3]]]],[11,"sub_assign","","",42,[[["ratio",3]]]],[11,"sub_assign","","",42,[[]]],[11,"checked_mul","","",42,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",42,[[],[["result",4],["ratio",3],["parseratioerror",3]]]],[11,"clone","","",43,[[],["parseratioerror",3]]],[11,"clone","","",42,[[],["ratio",3]]],[11,"new","num::complex","Create a new Complex",0,[[],["complex",3]]],[11,"i","","Returns imaginary unit",0,[[],["complex",3]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn\'t…",0,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"powu","","Raises `self` to an unsigned integer power.",0,[[],["complex",3]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[],["complex",3]]],[11,"inv","","Returns `1/self`",0,[[],["complex",3]]],[11,"powi","","Raises `self` to a signed integer power.",0,[[],["complex",3]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the [Manhattan…",0,[[]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients…",37,[[],["iterbinomial",3]]],[11,"new_raw","num::rational","Creates a `Ratio` without checking for `denom == 0` or…",42,[[],["ratio",3]]],[11,"numer","","Gets an immutable reference to the numerator.",42,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",42,[[]]],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",42,[[],["ratio",3]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",42,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",42,[[]]],[11,"is_integer","","Returns true if the rational number is an integer…",42,[[]]],[11,"reduced","","Returns a reduced copy of self.",42,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",42,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",42,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",42,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",42,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",42,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division…",42,[[],["ratio",3]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",42,[[],["ratio",3]]],[11,"approximate_float","","",42,[[],[["option",4],["ratio",3]]]]],"p":[[3,"Complex"],[8,"Integer"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Bounded"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"Num"],[8,"One"],[8,"PrimInt"],[8,"Saturating"],[8,"Signed"],[8,"Zero"],[3,"ExtendedGcd"],[8,"Roots"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_complex":{"doc":"Complex numbers.","i":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"new","","Create a new Complex",0,[[]]],[11,"i","","Returns imaginary unit",0,[[]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn\'t…",0,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[]]],[11,"powu","","Raises `self` to an unsigned integer power.",0,[[]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[]]],[11,"inv","","Returns `1/self`",0,[[]]],[11,"powi","","Raises `self` to a signed integer power.",0,[[]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the [Manhattan…",0,[[]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"eq","","",1,[[["parsecomplexerror",3]]]],[11,"ne","","",1,[[["parsecomplexerror",3]]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["complex",3]]],[11,"default","","",0,[[],["complex",3]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"from_usize","","",0,[[],["option",4]]],[11,"from_isize","","",0,[[],["option",4]]],[11,"from_u8","","",0,[[],["option",4]]],[11,"from_u16","","",0,[[],["option",4]]],[11,"from_u32","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_i8","","",0,[[],["option",4]]],[11,"from_i16","","",0,[[],["option",4]]],[11,"from_i32","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from","","",0,[[["toprimitive",8]],["option",4]]],[11,"as_","","",0,[[]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],["result",4]]],[11,"zero","","",0,[[]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"one","","",0,[[]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"inv","","",0,[[]]],[11,"mul_add","","",0,[[["complex",3]],["complex",3]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_integer":{"doc":"Integer trait and functions.","i":[[3,"ExtendedGcd","num_integer","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",0,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots",8]],["roots",8]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer",8]]]],[5,"div_floor","","Floored integer division",null,[[["integer",8]],["integer",8]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer",8]],["integer",8]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer",8]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer",8]],["integer",8]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["integer",8]],["integer",8]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["integer",8]],["integer",8]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[["integer",8]]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer",8],["clone",8]],[["integer",8],["clone",8]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer",8],["clone",8]]]],[8,"Roots","","Provides methods to compute an integer\'s square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",1,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",2,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",2,[[]]],[11,"div_ceil","","Ceiled integer division.",2,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",2,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",2,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",2,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",2,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",2,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",2,[[]]],[10,"is_even","","Returns `true` if the number is even.",2,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",2,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",2,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",2,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",2,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",2,[[]]],[11,"new","","For a given n, iterate over all binomial coefficients…",3,[[],["iterbinomial",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["extendedgcd",3]]]],[11,"ne","","",0,[[["extendedgcd",3]]]],[11,"next","","",3,[[],["option",4]]],[11,"clone","","",0,[[],["extendedgcd",3]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[]]]],"p":[[3,"ExtendedGcd"],[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","i":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[11,"from","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"clone","","",0,[[],["range",3]]],[11,"clone","","",1,[[],["rangeinclusive",3]]],[11,"clone","","",2,[[],["rangestep",3]]],[11,"clone","","",3,[[],["rangestepinclusive",3]]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]},\
"num_rational":{"doc":"Rational numbers","i":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",0,[[],["ratio",3]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[]]],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[],["ratio",3]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[]]],[11,"is_integer","","Returns true if the rational number is an integer…",0,[[]]],[11,"reduced","","Returns a reduced copy of self.",0,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",0,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",0,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",0,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",0,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",0,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division…",0,[[],["ratio",3]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[],["ratio",3]]],[11,"approximate_float","","",0,[[["floatcore",8],["numcast",8]],[["ratio",3],["option",4]]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[["parseratioerror",3]]]],[11,"ne","","",1,[[["parseratioerror",3]]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["option",4],["ordering",4]]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"neg","","",0,[[],["ratio",3]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[],[["ratio",3],["parseratioerror",3],["result",4]]]],[11,"into","","",0,[[]]],[11,"clone","","",0,[[],["ratio",3]]],[11,"clone","","",1,[[],["parseratioerror",3]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[],[["ratio",3],["parseratioerror",3],["result",4]]]],[11,"zero","","",0,[[],["ratio",3]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"one","","",0,[[],["ratio",3]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"checked_add","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_sub","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_mul","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_div","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"inv","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"abs","","",0,[[],["ratio",3]]],[11,"abs_sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"signum","","",0,[[],["ratio",3]]],[11,"is_positive","","",0,[[]]],[11,"is_negative","","",0,[[]]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","i":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord",8]],["partialord",8]]],[0,"bounds","","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",2,[[]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[]]],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,[[["numcast",8]],[["numcast",8],["option",4]]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[["toprimitive",8]],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",7,[[]]],[10,"neg_infinity","","Returns negative infinity.",7,[[]]],[10,"nan","","Returns NaN.",7,[[]]],[10,"neg_zero","","Returns `-0.0`.",7,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[]]],[11,"trunc","","Return the integer part of a number.",7,[[]]],[11,"fract","","Returns the fractional part of a number.",7,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[]]],[11,"min","","Returns the minimum of the two numbers.",7,[[]]],[11,"max","","Returns the maximum of the two numbers.",7,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[]]],[11,"powi","","Raise a number to an integer power.",7,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",8,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",8,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",8,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",8,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",8,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",8,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",8,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",8,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",8,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",8,[[]]],[10,"LN_10","","Return `ln(10.0)`.",8,[[]]],[10,"LN_2","","Return `ln(2.0)`.",8,[[]]],[10,"LOG10_E","","Return `log10(e)`.",8,[[]]],[10,"LOG2_E","","Return `log2(e)`.",8,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",8,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",8,[[]]],[11,"TAU","","Return the full circle constant `τ`.",8,[[]]],[0,"identities","num_traits","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,[[],["zero",8]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["one",8]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",9,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",9,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",9,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",10,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",10,[[]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",11,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",11,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",11,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",11,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",11,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",11,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",11,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",11,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",11,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",11,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",11,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",11,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",11,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",11,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",11,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",11,[[]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",12,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",13,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",14,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",15,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",16,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",17,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",18,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",19,[[],["option",4]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",20,null],[10,"inv","","Returns the multiplicative inverse of `self`.",20,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",21,null],[10,"mul_add","","Performs the fused multiply-add operation.",21,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",22,[[]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",23,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",23,[[]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",24,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",25,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",26,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",27,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",28,[[]]],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",null,[[["mul",8],["one",8],["clone",8]],[["one",8],["clone",8],["mul",8]]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["clone",8],["one",8],["checkedmul",8]],[["option",4],["one",8],["checkedmul",8],["clone",8]]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",29,null],[10,"pow","","Returns `self` to the power `rhs`.",29,[[]]],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,[[["signed",8]],["signed",8]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed",8]],["signed",8]]],[5,"signum","","Returns the sign of the number.",null,[[["signed",8]],["signed",8]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",30,[[]]],[10,"abs_sub","","The positive difference of two numbers.",30,[[]]],[10,"signum","","Returns the sign of the number.",30,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",30,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",30,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",31,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",31,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Signed"],[8,"Num"]]},\
"pebble_util":{"doc":"","i":[[3,"BinaryPrettyPrint","pebble_util","Values can be wrapped in this type when they\'re printed to…",null,null],[12,"0","","",0,null],[3,"InitGuard","","A guard for when you want to store some data in a static,…",null,null],[0,"downcast","","A copy of the `downcast-rs` library, but that has been…",null,null],[8,"Downcast","pebble_util::downcast","Supports conversion to `Any`. Traits to be extended by…",null,null],[10,"into_any","","Convert `Box<Trait>` (where `Trait: Downcast`) to `Box<dyn…",1,[[["box",3]],[["box",3],["any",8]]]],[10,"into_any_rc","","Convert `Rc<Trait>` (where `Trait: Downcast`) to `Rc<dyn…",1,[[["rc",3]],[["rc",3],["any",8]]]],[10,"as_any","","Convert `&Trait` (where `Trait: Downcast`) to `&Anydyn…",1,[[],["any",8]]],[10,"as_any_mut","","Convert `&mut Trait` (where `Trait: Downcast`) to `&Anydyn…",1,[[],["any",8]]],[8,"DowncastSync","","Extends `Downcast` to support `Sync` traits that thus…",null,null],[10,"into_any_arc","","Convert `Arc<Trait>` (where `Trait: Downcast`) to `Arc<dyn…",2,[[["arc",3]],[["any",8],["arc",3]]]],[0,"bitmap","pebble_util","It\'s useful to be able to model an integral type such as…",null,null],[8,"Bitmap","pebble_util::bitmap","",null,null],[10,"alloc","","Find `n` consecutive unset bits, set them and return the…",3,[[],["option",4]]],[10,"free","","Free `n` previously allocated bits, starting at `index`.",3,[[]]],[8,"BitmapSlice","","Like `Bitmap`, but for arrays. This is unfortunately…",null,null],[10,"alloc","","Find `n` consecutive unset bits, set them and return the…",4,[[],["option",4]]],[10,"free","","Free `n` previously allocated bits, starting at `index`.",4,[[]]],[11,"uninit","pebble_util","",5,[[],["initguard",3]]],[11,"initialize","","Initialize this `InitGuard`, allowing it to be read from…",5,[[]]],[11,"get","","Get a reference to the data, if this guard has been…",5,[[]]],[11,"try_get","","Get a reference to the data, if this guard has been…",5,[[],["option",4]]],[0,"math","","",null,null],[5,"flooring_log2","pebble_util::math","Fast integer `log2` that floors to the lower power-of-2 if…",null,[[]]],[5,"ceiling_log2","","",null,[[]]],[5,"align_down","","",null,[[]]],[5,"align_up","","",null,[[]]],[5,"ceiling_integer_divide","","Divide `x` by `divide_by`, taking the ceiling if it does…",null,[[]]],[0,"pin","pebble_util","This module includes some macros for more easily working…",null,null],[14,"impl_downcast","","Adds downcasting support to traits that extend…",null,null],[14,"unsafe_pinned","","A pinned projection of a struct field.",null,null],[14,"unsafe_unpinned","","An unpinned projection of a struct field.",null,null],[14,"assert_first_call","","This macro should be called at the beginning of functions…",null,null],[11,"into_any","","",0,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",0,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",0,[[],["any",8]]],[11,"as_any_mut","","",0,[[],["any",8]]],[11,"into_any_arc","","",0,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"into_any","","",5,[[["box",3]],[["any",8],["box",3]]]],[11,"into_any_rc","","",5,[[["rc",3]],[["rc",3],["any",8]]]],[11,"as_any","","",5,[[],["any",8]]],[11,"as_any_mut","","",5,[[],["any",8]]],[11,"into_any_arc","","",5,[[["arc",3]],[["arc",3],["any",8]]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"BinaryPrettyPrint"],[8,"Downcast"],[8,"DowncastSync"],[8,"Bitmap"],[8,"BitmapSlice"],[3,"InitGuard"]]},\
"spin":{"doc":"Synchronization primitives based on spinning","i":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","A guard to which the protected data can be read",null,null],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",null,null],[3,"Once","","A synchronization primitive which can be used to run a…",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,[[],["mutex",3]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[]]],[11,"lock","","Locks the spinlock and returns a guard.",0,[[],["mutexguard",3]]],[11,"force_unlock","","Force unlock the spinlock.",0,[[]]],[11,"try_lock","","Tries to lock the mutex. If it is already locked, it will…",0,[[],[["mutexguard",3],["option",4]]]],[11,"new","","Creates a new spinlock wrapping the supplied data.",1,[[],["rwlock",3]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",1,[[]]],[11,"read","","Locks this rwlock with shared read access, blocking the…",1,[[],["rwlockreadguard",3]]],[11,"try_read","","Attempt to acquire this lock with shared read access.",1,[[],[["option",4],["rwlockreadguard",3]]]],[11,"force_read_decrement","","Force decrement the reader count.",1,[[]]],[11,"force_write_unlock","","Force unlock exclusive write access.",1,[[]]],[11,"write","","Lock this rwlock with exclusive write access, blocking the…",1,[[],["rwlockwriteguard",3]]],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",1,[[],[["option",4],["rwlockwriteguard",3]]]],[18,"INIT","","Initialization constant of `Once`.",2,null],[11,"new","","Creates a new `Once` value.",2,[[],["once",3]]],[11,"call_once","","Performs an initialization routine once and only once. The…",2,[[]]],[11,"try","","Returns a pointer iff the `Once` was previously initialized",2,[[],["option",4]]],[11,"wait","","Like try, but will spin if the `Once` is in the process of…",2,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"deref","","",3,[[]]],[11,"deref","","",4,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",3,[[]]],[11,"deref_mut","","",5,[[]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"drop","","The dropping of the MutexGuard will release the lock it…",3,[[]]],[11,"drop","","",4,[[]]],[11,"drop","","",5,[[]]],[11,"default","","",0,[[],["mutex",3]]],[11,"default","","",1,[[],["rwlock",3]]]],"p":[[3,"Mutex"],[3,"RwLock"],[3,"Once"],[3,"MutexGuard"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);